{% extends "base_header.j2" %}

{% macro event_type(event) %}
typedef struct smf_{{ statemachine.name|lower }}_event_{{ event|lower }}_s {
    {% for member in statemachine.events[event].members %}
    {{ statemachine.events[event].members[member] }} {{ member }};
    {% endfor %}    
} smf_{{ statemachine.name|lower }}_event_{{ event|lower }}_t;
{% endmacro %}

{% block include_section %}
#include <stdint.h>

{% for state in statemachine.states %}
    {% for submachine in statemachine.states[state].statemachines %}
#include "smf_{{ submachine|lower }}_types.h"
    {% endfor %}
{% endfor %}
{% endblock include_section %}


{% block typedef_section %}
typedef enum smf_{{ statemachine.name|lower }}_events_e {
  {% for event in statemachine.events %}
    SMF_EVENT_{{ statemachine.name|upper }}_{{ event|upper }} = {{ loop.index -1 }},
  {% endfor %}
    SMF_EVENT_{{ statemachine.name|upper }}__NO_EVENT,
    SMF_EVENT_{{ statemachine.name|upper }}__COUNT
} smf_{{ statemachine.name|lower }}_events_t;

{% for event in statemachine.events %}
{{ event_type(event) }}
{% endfor %}

typedef struct smf_{{ statemachine.name|lower }}_event_s {
    smf_{{ statemachine.name|lower }}_events_t id;
    union {
    {% for event in statemachine.events %}
        smf_{{ statemachine.name|lower }}_event_{{ event|lower }}_t {{ event|lower }};
    {% endfor %}
    } event_data;
} smf_{{ statemachine.name|lower }}_event_t;

typedef enum smf_{{ statemachine.name|lower }}_states_e {
  {% for state in statemachine.states %}
    SMF_STATE_{{ statemachine.name|upper }}_{{ state|replace(".","_")|upper }} = {{ loop.index -1 }},
  {% endfor %}
    SMF_STATE_{{ statemachine.name|upper }}__COUNT
} smf_{{ statemachine.name|lower }}_states_t;

typedef struct smf_{{ statemachine.name|lower }}_instance_data_s {
  {% for member in statemachine.members %}
    {{ statemachine.members[member] }} {{ member }};
  {% endfor %}
} smf_{{ statemachine.name|lower }}_instance_data_t;

typedef struct smf_{{ statemachine.name|lower }}_private_s {
    smf_{{ statemachine.name|lower }}_states_t current_state[1];
    uint8_t current_active_states;
{% for state in statemachine.states %}
    {% for submachine in statemachine.states[state].statemachines %}
    smf_{{ submachine|lower }}__private_t {{ submachine }}; 
    {% endfor %}
{% endfor %}

    smf_{{ statemachine.name|lower }}_instance_data_t instance_data;
} smf_{{ statemachine.name|lower }}__private_t;

{% endblock typedef_section %}


